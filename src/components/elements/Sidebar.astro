---
/**
 * Sidebarコンポーネント
 *
 * サイドバーを表示するためのコンテナコンポーネント
 * サイドバーの幅や折り返すを制御可能
 */
import BaseElement from "./base/BaseElement.astro";

interface Props {
	class?: string;
	Element?: keyof HTMLElementTagNameMap;
	gap?: string;
	side?: "left" | "right";
	min?: string; // 最小幅を指定するためのプロパティ
	width?: string; // サイドバーの幅を指定するためのプロパティ
	noStretch?: boolean;
	[key: string]: any;
}

const {
	class: className,
	Element = "div",
	gap,
	side = "left",
	min,
	width,
	noStretch,
	...rest
} = Astro.props as Props;

// ユニークなIDを生成
const uniqueId = `sidebar-${Math.random().toString(36).substring(2, 9)}`;

// 基本コンポーネントに渡すプロパティを準備
const baseProps = {
	componentClass: "sidebar",
	class: [
		`sidebar--${side}`,
		width ? "sidebar--sideWidth" : "",
		noStretch ? "sidebar--noStretch" : "",
		uniqueId,
		className,
	]
		.filter(Boolean)
		.join(" "),
	Element,
	gap,
	"data-min": min || null,
	"data-width": width || null,
	...rest,
};
---

<BaseElement {...baseProps}>
  <slot />
</BaseElement>

<style lang="scss">
  @use "../../styles/tools/mixin" as mix;

  @include mix.element-base("sidebar") {
    display: flex;
    flex-wrap: wrap;
    gap: var(--sidebar-gap, var(--space-m));

    // attr()関数を使用してデータ属性から値を取得し、型を指定してカスタムプロパティに適用
    --sidebar-min: attr(data-min type(<percentage>), 50%);
    --sidebar-sideWidth: attr(data-width type(<length>), 0);

    @include mix.two-dimensional-gap(
      "--sidebar-gap",
      "--sidebar-row-gap",
      "--sidebar-column-gap"
    );

    > :global(*) {
      flex-grow: 1;
    }

    &--sideWidth > :global(*) {
      flex-basis: var(--sidebar-sideWidth);
    }

    &--right > :global(:first-child),
    &--left > :global(:last-child) {
      flex-grow: 999;
      flex-basis: 0;
      min-inline-size: var(--sidebar-min);
    }

    &--noStretch {
      align-items: flex-start;
    }
  }
</style>
