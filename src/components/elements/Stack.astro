---
/**
 * Stackコンポーネント
 *
 * 要素を縦方向に積み重ねるためのレイアウトプリミティブコンポーネント
 * 子要素間の間隔を一貫して制御するために使用します
 */
import BaseElement from "./base/BaseElement.astro";

interface Props {
  class?: string;
  Element?: keyof HTMLElementTagNameMap;
  gap?: string;
  padding?: string;
  recursive?: boolean;
  split?: boolean;
  /**
   * アクセシビリティ属性
   * 必要に応じてaria属性をサポート
   */
  [key: string]: unknown; // その他の属性を許可
}

const {
  class: className,
  Element = "div",
  gap,
  padding,
  ...rest
} = Astro.props as Props;

// 基本コンポーネントに渡すプロパティを準備
const baseProps = {
  componentClass: "stack",
  class: className,
  Element,
  ...rest,
};

// gap属性は特別に処理
// Stackでは子要素間のマージンを使用するため、この属性は直接渡す
const hasMultipleGaps = gap && gap.trim().split(/\s+/).length > 1;

// 複数のギャップ値を処理
const [mainGap, crossGap] = hasMultipleGaps
  ? gap.trim().split(/\s+/)
  : [gap, undefined];

// データ属性を準備
const dataAttributes = hasMultipleGaps
  ? {
      "data-stack": true,
      "data-main-gap": mainGap,
      "data-cross-gap": crossGap,
    }
  : {
      "data-stack": true,
      gap,
    };
---

<BaseElement padding={padding} {...baseProps} {...dataAttributes}>
  <slot />
</BaseElement>

<style lang="scss">
  @use "../../styles/tools/mixin" as *;

  /**
   * Stackコンポーネントのスタイル
   * BEM命名規則に従ったスタイル定義
   */
  @include element-base("stack") {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;

    /**
     * 子要素間の間隔を制御
     * 直接の子要素間にのみマージンを適用
     */
    > :global(*) + :global(*) {
      margin-block-start: var(--space, 1rem);
    }

    /**
     * gap属性を持つ場合のデフォルト設定
     */
    &:global([gap]) {
      --space: 1rem; /* デフォルト値 */
    }

    /**
     * スペーシングシステムの適用
     * 実際のマージン値を計算
     */
    @include space-variables;
  }

  /**
   * ネストされたStackコンポーネントのスタイル
   * 親のgap設定を子コンポーネントに引き継ぐ
   */
  @include nested-space-variables;
</style>
