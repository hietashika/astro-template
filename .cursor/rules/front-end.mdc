---
description: 
globs: *.astro,*.css,*.scss,*.ts
alwaysApply: false
---
# フロントエンドのルール

フロントエンドを実装する際に、参考にしてほしいルールについて説明します。

## フロントエンドのディレクトリ構成
{ここに設計思想を記載}
{ex: 設計思想として、ドメイン駆動開発とオニオンアーキテクチャを採用しています。}

```
astro-template/
├── public/ # 静的アセット
│   └── favicon.svg
├── src/
│   ├── components/ # 再利用可能なUIコンポーネント
│   │   ├── ui/ # 汎用的なUIコンポーネント（ボタン、カード、入力フォームなど）
│   │   ├── layout/ # レイアウト関連コンポーネント（ヘッダー、フッター、サイドバーなど）
│   │   └── feature/ # 特定機能に関連するコンポーネント
│   ├── layouts/ # ページレイアウト
│   │   └── Layout.astro
│   ├── pages/ # ルーティング用ページ
│   │   └── index.astro
│   ├── styles/ # グローバルスタイル、変数、ミックスイン
│   │   ├── variables.scss # 変数定義
│   │   ├── mixins.scss # ミックスイン
│   │   ├── components.scss # コンポーネント共通スタイル
│   │   ├── reset.css # リセットCSS
│   │   └── global.scss # グローバルスタイル
│   ├── utils/ # ユーティリティ関数
│   │   ├── media.ts # メディアクエリ関連
│   │   ├── spacing.ts # スペーシング制御用ヘルパー関数
│   │   └── i18n/ # 国際化ユーティリティ（将来的な拡張用）
│   └── assets/ # 静的アセット（画像、フォントなど）
│       ├── astro.svg
│       └── background.svg
├── astro.config.mjs # Astro設定ファイル
├── package.json # プロジェクト依存関係
├── tsconfig.json # TypeScriptの設定やsrc内で頻繁に使用するディレクトリのパスエイリアス
└── README.md # プロジェクトドキュメント
```



## 既存ファイルの例
常にこれらのファイルの記法を参考にして、実装を行ってください。

### Astro Element
- [BaseElement.astro](mdc:astro:src/components/elements/BaseElement.astro)
  - DRY原則を守り、Elementの実装を共通化する。
- [Link.astro](mdc:astro:src/components/elements/Link.astro)
  - BaseElementを継承して、リンクを表示するためのコンポーネントを作成する。

### Astro Component
- [Button.astro](mdc:astro:src/components/Button.astro)
  - Elementを継承して、ボタンを表示するためのコンポーネントを作成する。

### Astro Layout
- [Layout.astro](mdc:astro:src/layouts/Layout.astro)
  - ページのレイアウトを作成する。

### Astro Page
- [Index.astro](mdc:astro:src/pages/Index.astro)
  - ホームページを作成する。

### Astro Style
- [global.scss](mdc:astro:src/styles/global.scss)
  - グローバルなスタイルを定義する。
  - ITCSSを採用して、スタイルを管理する。

## フロントエンドのコーディング規約

常に[Astroの公式ドキュメント](mdc:https:/docs.astro.build/en/getting-started)を参照し、ベストプラクティスな実装を行う。

## html

マークアップにはHTML5で書いてください。

考慮すべきことは下記です

- コンテンツの性質、制作者の狙い
- HTMLのセマンティクス
- WAI-ARIAのセマンティクス
- ブラウザ・OS・スクリーンリーダーでのサポート状況、ユーザーにとっての使い勝手
- CSSやJavaScriptなど周辺技術との兼ね合い、連携のしやすさ
- ソースコードの運用性

## CSSのルール
メタ言語には、効率的にcssを書くためscssを採用しています。

### CSS設計
MindBEMdingの考え方を採用しています。
コードの見通しを良くし、開発や保守を容易にするためです。

#### 命名規則
命名規則は下記の通りにしてください:
`.blockName__elemenName--modifierName`

### カスケードレイヤー
ITCSSの設計思想に基づいて、カスケードレイヤーを採用しています。 
カスケードレイヤーの設定は、[global.scss](mdc:astro:src/styles/global.scss)に記載しています。
1. Settings - グローバル変数や設定（例：色、フォントサイズなど）
2. Tools - ミックスインや関数（例：メディアクエリ、ユーティリティ関数など）
3. Generic - リセットやノーマライズ（例：reset.css）
4. Elements - HTML要素の基本的なスタイル（例：h1, p, aなど）
5. Objects - レイアウトに関連するクラス（例：グリッドシステム、コンテナなど）

### reset.css
Reset.cssはdestyle.cssを採用。
[reset.css](mdc:src/styles/reset.css)

### レスポンシブデザイン
メディアクエリに依存しない柔軟なレイアウトを優先します。
EveryLayoutや、CSS Gridを活用してください。

### レスポンシブタイポグラフィ

このプロジェクトでは、レスポンシブなタイポグラフィを実装するために`clamp-size`ミックスインを使用します。 [_function.scss](mdc:astro:src/styles/tools/_function.scss)



## Astroコンポーネントのベストプラクティス

### アイランドアーキテクチャの活用

インタラクティブな部分のみをクライアントサイドでレンダリングし、それ以外は静的HTMLとして出力することで、パフォーマンスを向上させます。

### Reference

[Astro 公式ドキュメント](mdc:https:/astro.build/docs)
