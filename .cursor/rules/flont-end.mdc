---
description: フロントエンドの実装をする際に読むドキュメント
globs: **/*
---
# フロントエンドのディレクトリ構成

astro-template/
├── public/ # 静的アセット
│   └── favicon.svg
├── src/
│   ├── components/ # 再利用可能なUIコンポーネント
│   │   ├── ui/ # 汎用的なUIコンポーネント（ボタン、カード、入力フォームなど）
│   │   ├── layout/ # レイアウト関連コンポーネント（ヘッダー、フッター、サイドバーなど）
│   │   └── feature/ # 特定機能に関連するコンポーネント
│   ├── layouts/ # ページレイアウト
│   │   └── Layout.astro
│   ├── pages/ # ルーティング用ページ
│   │   └── index.astro
│   ├── styles/ # グローバルスタイル、変数、ミックスイン
│   │   ├── variables.scss # 変数定義
│   │   ├── mixins.scss # ミックスイン
│   │   ├── components.scss # コンポーネント共通スタイル
│   │   ├── reset.css # リセットCSS
│   │   └── global.scss # グローバルスタイル
│   ├── utils/ # ユーティリティ関数
│   │   ├── media.ts # メディアクエリ関連
│   │   └── i18n/ # 国際化ユーティリティ（将来的な拡張用）
│   └── assets/ # 静的アセット（画像、フォントなど）
│       ├── astro.svg
│       └── background.svg
├── astro.config.mjs # Astro設定ファイル
├── package.json # プロジェクト依存関係
├── tsconfig.json # TypeScriptの設定やsrc内で頻繁に使用するディレクトリのパスエイリアス
└── README.md # プロジェクトドキュメント

# 既存ファイルの例
常にこれらのファイルの記法を参考にして、実装を行ってください。

# フロントエンドのコーディング規約
常にhttps://docs.astro.build/en/getting-started/を参照にし、ベストプラクティスな実装を行う。

## html

マークアップにはHTML5に則って書いてください。

考慮すべきことは下記です:

- コンテンツの性質、制作者の狙い
- HTMLのセマンティクス
- WAI-ARIAのセマンティクス
- ブラウザ・OS・スクリーンリーダーでのサポート状況、ユーザーにとっての使い勝手
- CSSやJavaScriptなど周辺技術との兼ね合い、連携のしやすさ
- ソースコードの運用性

## css

メタ言語には、効率的にcssを書くためscssを採用しています。

### CSS設計
MindBEMdingの考え方を採用しています。
コードの見通しを良くし、開発や保守を容易にするためです。

### レスポンシブデザイン
メディアクエリに依存しない柔軟なレイアウトを優先します。
EveryLayoutや、CSS Gridを活用してください。


#### 命名規則
命名規則は下記の通りにしてください:
.blockName__elemenName--modifierName




### reset.css
Reset.cssはThe New CSS Resetを採用。
[reset.css](mdc:src/styles/reset.css)

CSSの新しい機能を使用した、シンプルで軽量なCSSのリセット。
displayプロパティを除いて、ブラウザから取得されるデフォルトのスタイルを使用したくないという目的に基づいて構築されています。
https://github.com/elad2412/the-new-css-reset/blob/main/css/reset.css

## Astroコンポーネントのベストプラクティス

### アイランドアーキテクチャの活用

インタラクティブな部分のみをクライアントサイドでレンダリングし、それ以外は静的HTMLとして出力することで、パフォーマンスを向上させます。
