---
description: フロントエンドの実装をする際に読むドキュメント
globs: **/*
---
# フロントエンドのディレクトリ構成

astro-template/
├── public/ # 静的アセット
│   └── favicon.svg
├── src/
│   ├── components/ # 再利用可能なUIコンポーネント
│   │   ├── ui/ # 汎用的なUIコンポーネント（ボタン、カード、入力フォームなど）
│   │   ├── layout/ # レイアウト関連コンポーネント（ヘッダー、フッター、サイドバーなど）
│   │   └── feature/ # 特定機能に関連するコンポーネント
│   ├── layouts/ # ページレイアウト
│   │   └── Layout.astro
│   ├── pages/ # ルーティング用ページ
│   │   └── index.astro
│   ├── styles/ # グローバルスタイル、変数、ミックスイン
│   │   ├── variables.scss # 変数定義
│   │   ├── mixins.scss # ミックスイン
│   │   ├── components.scss # コンポーネント共通スタイル
│   │   ├── reset.css # リセットCSS
│   │   └── global.scss # グローバルスタイル
│   ├── utils/ # ユーティリティ関数
│   │   ├── media.ts # メディアクエリ関連
│   │   ├── spacing.ts # スペーシング制御用ヘルパー関数
│   │   └── i18n/ # 国際化ユーティリティ（将来的な拡張用）
│   └── assets/ # 静的アセット（画像、フォントなど）
│       ├── astro.svg
│       └── background.svg
├── astro.config.mjs # Astro設定ファイル
├── package.json # プロジェクト依存関係
├── tsconfig.json # TypeScriptの設定やsrc内で頻繁に使用するディレクトリのパスエイリアス
└── README.md # プロジェクトドキュメント

# 既存ファイルの例
常にこれらのファイルの記法を参考にして、実装を行ってください。

# フロントエンドのコーディング規約
常にhttps://docs.astro.build/en/getting-started/を参照にし、ベストプラクティスな実装を行う。

## html

マークアップにはHTML5に則って書いてください。

考慮すべきことは下記です:

- コンテンツの性質、制作者の狙い
- HTMLのセマンティクス
- WAI-ARIAのセマンティクス
- ブラウザ・OS・スクリーンリーダーでのサポート状況、ユーザーにとっての使い勝手
- CSSやJavaScriptなど周辺技術との兼ね合い、連携のしやすさ
- ソースコードの運用性

## css

メタ言語には、効率的にcssを書くためscssを採用しています。

### CSS設計
MindBEMdingの考え方を採用しています。
コードの見通しを良くし、開発や保守を容易にするためです。

#### カスケードレイヤー
ITCSSの設計思想に基づいて、カスケードレイヤーを採用しています。 
1. Settings - グローバル変数や設定（例：色、フォントサイズなど） [_variable.scss](mdc:src/styles/settings/_variable.scss)
2. Tools - ミックスインや関数（例：メディアクエリ、ユーティリティ関数など） [_mixin.scss](mdc:src/styles/tools/_mixin.scss)
3. Generic - リセットやノーマライズ（例：reset.css） [_reset.css](mdc:src/styles/generic/_reset.css)
4. Elements - HTML要素の基本的なスタイル（例：h1, p, aなど） [_base.scss](mdc:src/styles/elements/_base.scss)
5. Objects - レイアウトに関連するクラス（例：グリッドシステム、コンテナなど）
6. Components - UIコンポーネント（例：ボタン、カード、フォームなど）
7. Utilities - ユーティリティクラス（例：margin, padding, text-alignなど）

### レスポンシブデザイン
メディアクエリに依存しない柔軟なレイアウトを優先します。
EveryLayoutや、CSS Gridを活用してください。


#### 命名規則
命名規則は下記の通りにしてください:
.blockName__elemenName--modifierName




### reset.css
Reset.cssはdestyle.cssを採用。
[reset.css](mdc:src/styles/reset.css)
https://github.com/nicolas-cusan/destyle.css/blob/master/destyle.css

## Astroコンポーネントのベストプラクティス

### アイランドアーキテクチャの活用

インタラクティブな部分のみをクライアントサイドでレンダリングし、それ以外は静的HTMLとして出力することで、パフォーマンスを向上させます。

## スペーシングシステム

このプロジェクトでは、一貫したスペーシング制御のための共通システムを実装しています。

### スペーシング変数

`src/styles/settings/_variables.scss` には、スペーシングに関する変数が定義されています：

```scss
--space-3xs: calc(var(--space-base) * 0.25); // 4px
--space-2xs: calc(var(--space-base) * 0.5); // 8px
--space-xs: calc(var(--space-base) * 0.75); // 12px
--space-m: var(--space-base); // 16px - 基準サイズ
--space-l: calc(var(--space-base) * 1.5); // 24px
// その他のサイズ...
```

### スペーシングミックスイン

`src/styles/tools/_mixin.scss` に、スペーシングクラスを生成するためのミックスインを用意しています：

```scss
@mixin spacing-classes($property, $prefix, $selector: '') {
  // クラス定義
}
```

このミックスインは以下のパラメータを受け取ります：
- `$property`: 制御するCSSプロパティ名（例：`--center-padding`, `--stack-gap`）
- `$prefix`: クラスのプレフィックス（例：`padding`, `margin`, `gap`）
- `$selector`: 追加のセレクタ（オプション）

### 二次元ギャップの制御

一部のレイアウトコンポーネントでは、行と列の間隔を個別に指定できる二次元ギャップを実装しています。これは以下の二つの方法で実装されています：

#### 1. クラスベースの実装（Clusterコンポーネント）

Clusterコンポーネントでは、CSS変数とクラス名を使用して二次元ギャップを制御します：

```astro
<!-- 行間・列間で同じギャップ値を使用 -->
<Cluster gap="2">コンテンツ</Cluster>

<!-- 行間（row-gap）と列間（column-gap）で異なる値を使用 -->
<Cluster gap="2 4">コンテンツ</Cluster>
```

2つの値を指定した場合：
- 最初の値は行間（row-gap）に適用されます - 例: "2" → 24px
- 2番目の値は列間（column-gap）に適用されます - 例: "4" → 48px

内部では`two-dimensional-gap`ミックスインを使用して、効率的に二次元ギャップを制御しています：

```scss
@mixin two-dimensional-gap($base-property, $row-property, $column-property) {
  // ミックスインの実装
}
```

#### 2. 属性ベースの実装（Stackコンポーネント）

Stackコンポーネントでは、HTML属性を使用して二次元ギャップを制御します：

```astro
<!-- 単一のギャップ値 -->
<Stack gap="2">コンテンツ</Stack>

<!-- 主軸と交差軸で異なるギャップ値 -->
<Stack gap="3 1">コンテンツ</Stack>
```

複数値を指定した場合：
- 最初の値は主軸（margin-block-start）に適用され、子要素間の縦方向の間隔を制御します
- 2番目の値は交差軸（column-gap）に適用され、水平方向の間隔を制御します

Stackコンポーネントではmargin-block-startを使用して子要素間の間隔を制御する特殊な実装がされているため、属性ベースの制御が採用されています。

```scss
&:global([data-main-gap="3"]) {
  --space: var(--space-xl); // 32px
}

&:global([data-cross-gap="1"]) {
  column-gap: var(--space-m); // 16px
}
```

### スペーシングヘルパー関数

TypeScriptを使って、属性からクラス名を生成するヘルパー関数を `src/utils/spacing.ts` に実装しています：

```typescript
// 単一のスペーシング属性からクラス名を生成
getSpacingClass(value: string | undefined, prefix: string): string

// 複数のスペーシング属性からクラス名を生成
getSpacingClasses(values: Record<string, string | undefined>): string[]

// ギャップ値（単一または複数）からクラス名を生成
getGapClasses(value: string | undefined, options?: object): string[] | Record<string, string>
```

### 使用方法

#### コンポーネントでのスペーシング制御

```astro
<Center padding="1">コンテンツ</Center>
<Box padding="2" margin="1">コンテンツ</Box>
```

値は以下の規則で指定します：
- 正の数値: `1`（16px）, `2`（24px）, `3`（32px）など
- 負の数値: `-1`（12px）, `-2`（8px）, `-3`（4px）
- `0`: スペースなし

#### 新しいコンポーネントでの実装例

```astro
---
import { getSpacingClass } from '../../utils/spacing';

interface Props {
  padding?: string;
  // その他のプロパティ
}

const { padding, ...rest } = Astro.props;
const paddingClass = getSpacingClass(padding, 'padding');
---

<div class:list={["component", paddingClass]} {...rest}>
  <slot />
</div>

<style lang="scss">
  @use "../../styles/tools/mixin" as mix;
  
  .component {
    padding: var(--component-padding, var(--space-m));
    
    @include mix.spacing-classes('--component-padding', 'padding');
  }
</style>
```

#### 複数のスペーシング属性を持つコンポーネント

```astro
---
import { getSpacingClasses } from '../../utils/spacing';

interface Props {
  padding?: string;
  margin?: string;
  // その他のプロパティ
}

const { padding, margin, ...rest } = Astro.props;
const spacingClasses = getSpacingClasses({ padding, margin });
---

<div class:list={["component", ...spacingClasses]} {...rest}>
  <slot />
</div>

<style lang="scss">
  @use "../../styles/tools/mixin" as mix;
  
  .component {
    padding: var(--component-padding, var(--space-m));
    margin: var(--component-margin, 0);
    
    @include mix.spacing-classes('--component-padding', 'padding');
    @include mix.spacing-classes('--component-margin', 'margin');
  }
</style>
```

#### 二次元ギャップを持つコンポーネントの実装例

##### クラスベースの実装（Flexbox使用時）

```astro
---
import { getGapClasses } from '../../utils/spacing';

interface Props {
  gap?: string;
  // その他のプロパティ
}

const { gap, ...rest } = Astro.props;
// gap="2 4"のような形式をサポート
const gapClasses = getGapClasses(gap);
---

<div 
  class:list={[
    "component", 
    ...(Array.isArray(gapClasses) ? gapClasses : [])
  ]} 
  {...rest}
>
  <slot />
</div>

<style lang="scss">
  @use "../../styles/tools/mixin" as mix;
  
  .component {
    display: flex;
    flex-wrap: wrap;
    gap: var(--component-gap, var(--space-m));
    
    // 二次元ギャップ処理用ミックスインを使用
    @include mix.two-dimensional-gap(
      "--component-gap",
      "--component-row-gap",
      "--component-column-gap"
    );
  }
</style>
```

##### 属性ベースの実装（Stackコンポーネント等）

```astro
---
interface Props {
  gap?: string;
  // その他のプロパティ
}

const { gap, ...rest } = Astro.props;

// gap値を解析し、複数の値が指定されているか確認
const hasMultipleGaps = gap && typeof gap === "string" && gap.trim().split(/\s+/).length > 1;
const [mainGap, crossGap] = hasMultipleGaps
  ? gap.trim().split(/\s+/)
  : [gap, undefined];
---

<div
  class:list={["component"]}
  {...hasMultipleGaps
    ? { "data-main-gap": mainGap, "data-cross-gap": crossGap }
    : { gap }}
  {...rest}
>
  <slot />
</div>

<style lang="scss">
  @use "../../styles/tools/mixin" as *;
  
  .component {
    // コンポーネント固有のスタイル
    
    // 子要素間の間隔を制御（Stackパターンの場合）
    > :global(*) + :global(*) {
      margin-block-start: var(--space, 1rem);
    }
    
    // gap属性を処理
    &:global([gap]) {
      --space: 1rem; /* デフォルト値 */
    }
    
    // スペーシングシステムの適用
    @include space-variables;
    
    // 二次元ギャップのサポート
    &:global([data-main-gap]) {
      // 主軸方向のギャップ処理コード
    }
    
    &:global([data-cross-gap]) {
      // 交差軸方向のギャップ処理コード
    }
  }
</style>
```

この二つのアプローチを使用することで、様々なレイアウトパターンに最適なギャップ制御を実装できます。コンポーネントの特性に合わせて適切な方法を選択してください。